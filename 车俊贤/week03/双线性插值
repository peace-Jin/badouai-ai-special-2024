# -*- coding: utf-8 -*-

import numpy as np
import cv2

'''
python implementation of bilinear interpolation
'''


def double_line_insert_value(img, out_dim):
    ori_h, ori_w, tube = img.shape
    out_h, out_w = out_dim[0], out_dim[1]
    print("ori_h, ori_w = ", ori_h, ori_w)
    print("out_h, out_w = ", out_h, out_w)
    if ori_h == out_h and ori_w == out_w:
        return img.copy()
    out_img = np.zeros((out_h, out_w, 3), dtype=np.uint8)
    rat_x, rat_y = float(ori_w) / out_w, float(ori_h) / out_h
    for i in range(tube):
        for out_y in range(out_h):
            for out_x in range(out_w):
                ori_y = (out_y + 0.5) * rat_y - 0.5
                ori_x = (out_x + 0.5) * rat_x - 0.5
                ori_x0 = int(np.floor(ori_x))
                ori_x1 = min(ori_x0 + 1, ori_w - 1)
                ori_y0 = int(np.floor(ori_y))
                ori_y1 = min(ori_y0 + 1, ori_h - 1)

                form1 = (ori_x1 - ori_x) * img[ori_y0, ori_x0, i] + (ori_x - ori_x0) * img[ori_y0, ori_x1, i]
                form2 = (ori_x1 - ori_x) * img[ori_y1, ori_x0, i] + (ori_x - ori_x0) * img[ori_y1, ori_x1, i]
                out_img[out_y, out_x, i] = int((ori_y1 - ori_y) * form1 + (ori_y - ori_y0) * form2)
    return out_img


if __name__ == '__main__':
    img = cv2.imread('lenna.png')
    out = double_line_insert_value(img,(700,700))
    cv2.imshow('out', out)
    cv2.waitKey()
